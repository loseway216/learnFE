<template>
  <div class="container">
    <div class="wrapper">
      <div class="bar">
        <span class="bar__title">资产总数</span>
        <span class="bar__count">368</span>
        <!-- <span class="bar__count">{{ asset.assetStatus.total }}</span> -->
        <span class="bar__title">在线资产数</span>
        <span class="bar__count">335</span>
        <!-- <span class="bar__count">{{ asset.assetStatus.online }}</span> -->
        <span class="bar__title">离线资产数</span>
        <span class="bar__count">33</span>
        <!-- <span class="bar__count">{{ asset.assetStatus.offline }}</span> -->
      </div>
      <div class="switch">
        <MapSwitch @on-click="getState" />
      </div>
      <div id="map" ref="map"></div>
      <!-- <div class="summary">
        <div class="item">
          <span class="name">已接入工厂数量: </span><span class="value">?</span>
        </div>
        <div class="item">
          <span class="name">供应商数量: </span><span class="value">?</span>
        </div>
      </div> -->
      <img :src="gif" alt="gif" class="gif" />
    </div>
    <RightDisplay class="right"></RightDisplay>
  </div>
</template>

<script setup>
import RightDisplay from "../../components/layout/Right/RightDisplay.vue";
import MapSwitch from "./mapswitch/MapSwitch.vue";

import gif from "@/assets/images/map_background.gif";
import chinaJson from "@/assets/map/china.json";
import shanghaiJson from "@/assets/map/province/shanghai.json";
import { useAssetStore } from "@/stores/asset";
import { mapCoords, mapOptions } from "@/utils/map.js";
import { onBeforeUnmount, onMounted, ref } from "vue";
import { useRouter } from "vue-router";

import { getCurrentInstance } from "vue";

const { proxy } = getCurrentInstance();
const router = useRouter();

const asset = useAssetStore();
asset.getAssetStatus();

//获取切换地图的信息
function getState(state) {
  if (state === "1") {
    option.geo[0].map = "shanghai";
    option.geo[1].map = "shanghai";
    option.geo[1].label.show = true;
    option.series[0].data = result2;
    option.series[1].data = option.series[0].data;
    option.series[2].label.show = false;
    option.series[3].label.show = false;
    mapChart.setOption(option);
  } else if (state === "0") {
    option.geo[0].map = "china";
    option.geo[1].map = "china";
    option.geo[1].label.show = false;
    option.series[0].data = result1;
    option.series[1].data = option.series[0].data;
    option.series[2].label.show = true;
    option.series[3].label.show = true;
    mapChart.setOption(option);
  }
}
const map = ref(null);
let mapChart = null;
let option = mapOptions();
const geoData = [
  {
    source: "天津",
    destination: "长宁",
  },
  {
    source: "襄阳",
    destination: "长宁",
  },
  {
    source: "南京",
    destination: "长宁",
  },
  {
    source: "青浦",
    destination: "长宁",
  },
];
const result1 = [];
const result2 = [
  {
    fromName: "青浦",
    toName: "长宁",
    coords: [
      [121.1751, 31.1909],
      [121.3852, 31.2115],
    ],
  },
];
geoData.forEach((item) => {
  const coordsFrom = mapCoords[item.source] || [0, 0];
  const coordsTo = mapCoords[item.destination] || [0, 0];
  const result = {
    fromName: item.source,
    toName: item.destination,
    coords: [coordsFrom, coordsTo],
  };
  result1.push(result);

  // 尾迹
  option.series[0].data.push(result);
  option.series[1].data = option.series[0].data;
  option.series[2].data.push({
    // 涟漪（终点）
    name: item.destination,
    value: coordsTo,
  });
  option.series[3].data.push({
    // 散点（起点）
    name: item.source,
    value: coordsFrom,
    symbolSize: 2,
  });
});

// console.log(option);

onMounted(() => {
  mapChart = echarts.init(map.value);
  echarts.registerMap("shanghai", shanghaiJson);
  echarts.registerMap("china", chinaJson);
  mapChart.setOption(option);
  window.addEventListener("resize", () => mapChart.resize());
  mapChart.on("click", (event) => {
    // TODO: 哪些市
    const citys = ["长宁"];
    if (event.componentType === "geo" && citys.includes(event.name)) {
      router.push(`/topo/${event.name}`);
    }
    if (
      event.componentSubType === "effectScatter" &&
      citys.includes(event.data.name)
    ) {
      router.push(`/topo/${event.data.name}`);
    }
  });
});

onBeforeUnmount(() => {
  if (mapChart) {
    window.removeEventListener("resize", () => mapChart.resize());
    mapChart.clear();
    mapChart.dispose();
  }
});
</script>

<style scoped lang="less">
.container {
  display: flex;
  .wrapper {
    flex: 1;
    width: 100%;
    height: 100%;
    position: relative;
  }
  .right {
    max-width: 400px;
    width: 30%;
    height: 100%;
  }
}

.switch {
  position: absolute;
  bottom: 25%;
  left: 15%;
  z-index: 10;
}

#map {
  width: 100%;
  height: 100%;
  /* background-image: url(../assets/images/map_background.gif) bottom/contain
    no-repeat content-box border-box; */
  z-index: 2;
}

.summary {
  position: absolute;
  left: 50%;
  top: 10%;
  transform: translatex(-50%);
  font-size: 20px;
  font-weight: 500;
  border: 1px solid rgba(51, 102, 255, 0.55);
  box-shadow: inset 17px 0 15px -15px rgb(51 102 255 / 55%),
    inset -15px 0 17px -15px rgb(51 102 255 / 55%);
  padding: 20px;
  color: #00ffe4;
  z-index: 10;
}

.name {
  display: inline-block;
  width: 180px;
}

.gif {
  width: 80%;
  height: 50%;
  position: absolute;
  bottom: 0;
  left: 10%;
  right: 10%;
  z-index: 1;
}

.bar {
  height: 56px;
  width: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
  position: relative;
  background: url("../../assets/images/env_title.svg") 0 0/100% 100% no-repeat;
  // margin-top: 20px;

  &__title {
    font-size: 16px;
    margin-right: 5px;
    display: inline-block;
    color: rgba(255, 255, 255, 0.85);
  }

  &__count {
    font-size: 24px;
    margin-right: 50px;
    display: inline-block;
    color: #01f8e3;
  }
}
</style>
